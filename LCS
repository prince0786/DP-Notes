

// Recursive Approach
/* Returns length of LCS for X[0..m-1], Y[0..n-1] */
int lcs( char *X, char *Y, int m, int n )
{
    if (m == 0 || n == 0)
        return 0;
    if (X[m-1] == Y[n-1])
        return 1 + lcs(X, Y, m-1, n-1);
    else
        return max(lcs(X, Y, m, n-1), lcs(X, Y, m-1, n));
}
  
/* Driver code */
int main()
{
    char X[] = "AGGTAB";
    char Y[] = "GXTXAYB";
     
    int m = strlen(X);
    int n = strlen(Y);
     
    cout<<"Length of LCS is "<< lcs( X, Y, m, n ) ;
     
    return 0;
}
// Memoization
    // int dp[1001][1001]={-1};
//     int maxLen(string s1,string s2,int m,int n,vector<vector<int> > &dp){
//         if(m==0||n==0){
//             return 0;
//         }        
//         if(s1[m-1]==s2[n-1]){
//             return dp[m][n]=1 + maxLen(s1,s2,m-1,n-1,dp);
//         }
//         if(dp[m][n]!=-1){
//             return dp[m][n];
//         }
//         else{
//             return dp[m][n]=max(maxLen(s1,s2,m,n-1,dp),maxLen(s1,s2,m-1,n,dp));
//         }        
        
//     }
    
    // Tabulation  TC : O(N*M)
    int longestCommonSubsequence(string text1, string text2) {
        // vector<vector<int> >dp(text1.length()+1, vector<int>(text2.length()+1));
        int n = text1.size();
        int m = text2.size();
        int dp[n+1][m+1];
        
        for(int i=0; i<n+1; i++){
            for(int j=0; j<m+1; j++){
                if(i==0 || j==0){
                    dp[i][j]=0;
                }
                else if(text1[i-1] == text2[j-1]){
                    dp[i][j] = 1+dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }
        return dp[n][m];
    }
