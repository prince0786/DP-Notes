

//Recursive  TC : O(2^n) Auxillary Space : O(1) + O(N)
int knapsack(int wt[], int val[], int W, int n){
    if(n==0 || W==0){
        return 0;
    }
    if(wt[n-1] <= W){
        return max(val[n-1] + knapsack(wt, val, W-wt[n-1], n-1), knapsack(wt, val, W, n-1));
    }
    else{
        return knapsack(wt, val, W, n-1);
    }
}
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapsack(wt, val,W, n);
    return 0;
}

// Memoization   TC : O(N*W) SC : O(N*W) + O(W)
int knapsack(int wt[], int val[], int W, int n, int **dp){
    if(n<0){
        return 0;
    }

    if(dp[n][W] != -1){
        return dp[n][W];
    }
    if(wt[n-1] <= W){
        return dp[n][W] = max(val[n-1] + knapsack(wt, val, W-wt[n-1], n-1), knapsack(wt, val, W, n-1));
    }
    else{
        return knapsack(wt, val, W, n-1);
    }
    return dp[n][W];
}

//Tabulation   TC : O(N*W)  ASC : O(N*W)
// A utility function that returns
// maximum of two integers
int max(int a, int b)
{
    return (a > b) ? a : b;
}
int knapsack(int wt[], int val[], int W, int n){
    
    vector<vector<int>> dp(n + 1, vector<int>(W + 1));

    for(int i=0; i<n+1; i++){
        for(int j=0; j<W+1; j++){
            if(i==0 || j==0){
                dp[i][j] = 0;
            }
            if(wt[i-1] <= j){
                dp[i][j] = max(val[i-1] + dp[i-1][j-wt[i-1]], dp[i-1][j]);
            }
            else{
                dp[i][j] = dp[i-1][j];
            }
        }
    }
    return dp[n][W];
}

//More Optimised DP in Space  TC : O(N*W)  SC : O(W)
int knapSack(int W, int wt[], int val[], int n)
{
    // making and initializing dp array
    int dp[W + 1];
    memset(dp, 0, sizeof(dp));
 
    for (int i = 1; i < n + 1; i++) {
        for (int w = W; w >= 0; w--) {
 
            if (wt[i - 1] <= w)
                // finding the maximum value
                dp[w] = max(dp[w],
                            dp[w - wt[i - 1]] + val[i - 1]);
        }
    }
    return dp[W]; // returning the maximum value of knapsack
}
